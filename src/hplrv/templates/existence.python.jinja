{# SPDX-License-Identifier: MIT #}
{# Copyright © 2021 André Santos #}

{% import 'common.python.jinja' as G %}

{##############################################################################}
{# TIMER MACROS #}
{##############################################################################}

{% macro _on_timer(sm) %}
if self._state == {{ G.STATE_ACTIVE }} and (stamp - self.time_state) >= {{ sm.timeout }}:
{{ G.change_to_state(G.STATE_FALSE, returns=false)|indent(4, first=true) }}
{%- endmacro %}


{##############################################################################}
{# MSG EVENT MACROS #}
{##############################################################################}

{% macro _on_msg(sm, event, topic) -%}
{% if event.event_type == G.EVENT_ACTIVATOR %}
{# after or after-until -#}
{{ G.activator_event(event, topic) }}
{%- elif event.event_type == G.EVENT_TERMINATOR %}
{# until or after-until -#}
{{ G.terminator_event(sm, event, topic) }}
{%- elif event.event_type == G.EVENT_BEHAVIOUR %}
{{ _behaviour(sm, event, topic) }}
{%- else %}
assert False, 'unexpected event type: {{ event.event_type }}'
{%- endif %}
{%- endmacro %}

{% macro _behaviour(sm, event, topic) -%}
    {% if event.activator %}
assert len(self.witness) >= 1, 'missing activator'
v_{{ event.activator }} = self.witness[0].msg
    {% endif %}
    {% if sm.reentrant_scope %}
        {# has G.STATE_SAFE #}
        {% call G.change_to_state_if(event.predicate, G.STATE_SAFE) %}
self.witness.append(MsgRecord('{{ topic }}', stamp, msg))
        {%- endcall %}
    {% else %}
        {# collapse to G.STATE_TRUE #}
        {% call G.change_to_state_if(event.predicate, G.STATE_TRUE) %}
self.witness.append(MsgRecord('{{ topic }}', stamp, msg))
        {%- endcall %}
    {% endif %}
{%- endmacro %}


{##############################################################################}
{# RENDERED CODE #}
{##############################################################################}

{# assume: global('state_machine') #}
{% call(cb) G.state_machine(state_machine) -%}
    {% if cb == G.CALLBACK_TIMER -%}
{{ _on_timer(state_machine) }}
    {%- elif cb == G.CALLBACK_MSG -%}
{{ _on_msg(state_machine, varargs[0], varargs[1]) }}
    {%- else -%}
assert False, 'unexpected macro function type: {{ args }}'
    {%- endif %}
{%- endcall %}
